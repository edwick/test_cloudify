tosca_definitions_version: cloudify_dsl_1_3

description: >
  The instantiates an OpenStack VM and installs a Cloudify Manager on it.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml

inputs:
  agent_user:
    description: User name used when SSH-ing into the started machine
  image:
    description: Openstack image name or id to use for the new server
  flavor:
    description: Openstack flavor name or id to use for the new server
  network_name:
    description: Openstack network name the new server will be connected to
  floating_network_id:
    description: The id of the network to use for allocating a floating ip
  key_pair_name:
    description: Openstack key pair name of the key to associate with the new server
  security_group_name:
    description: Openstack Security Group name to use for the deployed VM
  private_key_path:
    description: |
      Path to the private key which will be used for connecting to the server
      on the manager or machine running CLI if running in local mode.
  keystone_username:
    description: |
      Username to authenticate to Keystone with.
    type: string
    default: ''
  keystone_password:
    description: |
      KeyStone password.
    type: string
    default: ''
  keystone_tenant_name:
    description: |
      Name of tenant to operate on.
    type: string
    default: ''
  keystone_url:
    description: |
      URL for KeyStone.
    type: string
    default: ''
  region:
    description: |
      OpenStack region to use.
    type: string
    default: ''
  mgr_resources_url:
    description: Resources URL for manager.tar.gz file
    type: string
    default: 'http://repository.cloudifysource.org/org/cloudify3/3.4.0/ga-RELEASE/cloudify-manager-resources_3.4.0-ga-b400.tar.gz'

dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_types:
  CloudifyManager:
    derived_from: cloudify.nodes.SoftwareComponent
    properties:
      bootstrap_working_directory:
        description: Location on the VM to download and install working files for the Cloudify manager bootstrap
        type: string
        default: /tmp
      mgr_resources_url:
        description: URL to download cloudify manager resources package from
        type: string
        default: { get_input: mgr_resources_url }
      mgr_blueprints_url:
        description: URL source for cloudify manager blueprints
        type: string
        default: https://github.com/cloudify-cosmo/cloudify-manager-blueprints/archive/3.4.tar.gz
      cli_version:
        description: Version number for Cloudify Command-line Interface (CLI)
        type: string
        default: 3.4
      cfy_builtin_yaml_url:
        description: URL for Cloudify built-in YAMLs
        type: string
        default: http://www.getcloudify.org/spec
      cfy_builtin_yaml_list:
        description: List of Cloudify built-in YAML files to install (separated by spaces)
        type: string
        default: 'cloudify/3.4.1/types.yaml fabric-plugin/1.4.1/plugin.yaml openstack-plugin/1.4/plugin.yaml aws-plugin/1.4.1/plugin.yaml tosca-vcloud-plugin/1.3.1/plugin.yaml vsphere-plugin/2.0/plugin.yaml diamond-plugin/1.3.3/plugin.yaml'
      cfy_wagon_url:
        description: URL to download Cloudify Wagons
        type: string
        default: http://repository.cloudifysource.org/cloudify/wagons
      cfy_wagon_list:
        description: List of Cloudify Wagons to install on the cloudify manager (separated by spaces)
        type: string
        default: 'cloudify-fabric-plugin/1.4.1/cloudify_fabric_plugin-1.4.1-py27-none-linux_x86_64-centos-Core.wgn'
      public_ip:
        description: Public IP address to which you want to connect your Cloudify manager
        type: string
        # NOTE: no default since we need to pull this from the cloudify_manager_vm node

    interfaces:
      cloudify.interfaces.lifecycle:
        create: scripts/download_cloudify_installers.sh
        configure: scripts/create_bootstrap_inputs_file.py

node_templates:

  floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_configuration
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: floating_network_id }

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: security_group_name}

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: key_pair_name }
      private_key_path: { get_input: private_key_path }

  cloudify_manager_vm:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_configuration
      agent_config:
        user: { get_input: agent_user }
        key: { get_property: [ keypair, private_key_path ] }
      image: { get_input: image }
      flavor: { get_input: flavor }
      management_network_name: { get_input: network_name }
    relationships:
      - { type: cloudify.openstack.server_connected_to_keypair, target: keypair }
      - { type: cloudify.openstack.server_connected_to_floating_ip, target: floating_ip }
      - { type: cloudify.openstack.server_connected_to_security_group, target: security_group }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              security_groups: [{ get_attribute: [ security_group, external_name ]}]

  cloudify_manager_bootstrap:
    type: CloudifyManager
    relationships:
      - { type: cloudify.relationships.contained_in, target: cloudify_manager_vm }
    properties:
      public_ip: { get_attribute: [floating_ip, floating_ip_address] }

outputs:
  floating_ip:
    description: Floating IP Address of New Cloudify Manager
    value: { get_attribute: [floating_ip, floating_ip_address] }
